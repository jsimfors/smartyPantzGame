{"version":3,"sources":["game/gameContainer.js","game/gameView.js","start/startView.js","start/startContainer.js","highScore/highScoreView.js","highScore/highScoreContainer.js","gameOver/gameOverContainer.js","App.js","serviceWorker.js","index.js"],"names":["client_id","getApiData","id","client_secret","setTrack","console","log","authOptions","url","headers","Buffer","toString","form","grant_type","json","request","require","post","error","response","body","statusCode","token","access_token","options","get","Game","id1","id2","React","useState","track1","setTrack1","track2","setTrack2","useEffect","GameView","name","popularity","alt","src","album","images","to","StartView","Start","HighScoreView","onAdd","highScores","h","createElement","map","index","score","key","onSubmit","type","value","app","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","db","getHighScores","setRows","collection","orderBy","limit","then","querySnapshot","allRows","forEach","doc","push","data","addToDB","event","preventDefault","target","elements","add","HighScoreContainer","rows","GameOver","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.f53927d0.chunk.js","sourcesContent":["import React from 'react';\nimport GameView from './gameView.js'\nvar client_id = '02c78a6b532f4efb8e5824c6cff48a57'; // Your client id\nvar client_secret = '79ab1ea19083458cb62a68bf6bca4ce5'; // Your secret\n\n\nconst Game = () => {\n\n    //var request = require('request'); // \"Request\" library\n    var id1 = \"2TpxZ7JUBn3uw46aR7qd6V\";\n    var id2 = \"11dFghVXANMlKmJXsNCbNl\";\n    const [track1, setTrack1] = React.useState();\n    const [track2, setTrack2] = React.useState();\n\n\n    React.useEffect( () => {\n        getApiData(id1, client_id, client_secret, setTrack1)\n        getApiData(id2, client_id, client_secret, setTrack2)\n\n        //getApiData2(id2, client_id, client_secret, setTrack2)\n\n    }, [id1, id2])\n\n\n\n    return <GameView\n        track1={track1}\n        track2={track2}\n\n        //track={track}\n        />\n}\n\n\nfunction getApiData(id, client_id, client_secret, setTrack){\n    console.log(\"fetch starting!\")\n    // your application requests authorization\n    var authOptions = {\n    url: 'https://accounts.spotify.com/api/token',\n    headers: {\n        'Authorization': 'Basic ' + (new Buffer(client_id + ':' + client_secret).toString('base64'))\n    },\n    form: {\n        grant_type: 'client_credentials'\n    },\n    json: true\n    };\n    var request = require('request'); // \"Request\" library\n    console.log(\"authOptions is: \" + authOptions)\n  \n    request.post(authOptions, function(error, response, body) {\n        console.log(error)\n        console.log(response.statusCode)\n    if (!error && response.statusCode === 200) {\n        console.log(\"In the if-statement!\")\n        // use the access token to access the Spotify Web API\n        var token = body.access_token;\n        var options = {\n          url: 'https://api.spotify.com/v1/tracks/' + id,\n        //url: 'https://api.spotify.com/v1/tracks/2TpxZ7JUBn3uw46aR7qd6V',\n        headers: {\n            'Authorization': 'Bearer ' + token\n        },\n        json: true\n        };\n  \n        request.get(options, function(error, response, body) {\n            console.log(\"Body in fetch: \");\n            console.log(body);\n\n            setTrack(body)\n            //setTrack(body);\n  \n  \n        });\n        //return body\n        }\n    });\n  }\n\n/*\nconst Game = () => {\n    \n\n\n    return <GameView\n    body={body}/>\n}\n*/\n\nexport default Game;\n","import React from 'react';\nimport {Link} from 'react-router-dom';\n\n\nfunction GameView({track1, track2}) {\n    return (\n      <div>\n      <h2>Game</h2>\n      {/* <Link to={ROUTES.HIGH_SCORE}>HighScore</Link> This is another way to wirte it */}\n      <h3>The track is: \"{track1?track1.name:null}\" with popularity: {track1?track1.popularity:null}</h3>\n      <img alt=\"firstTrack\" src={track1?track1.album.images[\"0\"].url:null} />;\n\n      <h3>The second track is: \"{track2?track2.name:null}\" with popularity: {track2?track2.popularity:null}</h3>\n      <img alt=\"secondTrack\" src={track2?track2.album.images[\"0\"].url:null} />;\n\n      <h2>Which is the most popular?</h2>\n      <h4>[ ] track 1    [ ] track 2</h4>\n      <div><Link to=\"/highscore\">HighScore</Link></div>\n      <div><Link to=\"/\">Back to startpage</Link></div>\n\n    </div>\n    );\n  }\n\n\nexport default GameView;","import React from 'react';\nimport {Link} from 'react-router-dom';\nfunction StartView() {\n    return (\n      <div>\n        <h2>Start</h2>\n        <div><Link to=\"/game\">Start game</Link></div>\n        <div><Link to=\"/highscore\">HighScore</Link></div>\n      </div>\n    );\n  }\n\nexport default StartView;","import React from 'react';\nimport StartView from './startView.js'\n\nconst Start = () => {\n    return <StartView\n    />\n}\n\nexport default Start;","import React from 'react';\n\nfunction HighScoreView({onAdd, highScores}) {\n    const h = React.createElement;\n\n    return (<div>\n        <h2>THE 10 MOST SMARTYPANTZ</h2>\n        <table>\n            <tbody>\n                <tr><th>Rank</th><th>Score</th><th>Name</th></tr>\n                {highScores.map(({score, name}, index) => <tr key={index}><td>{index+1}</td><td>{score}</td><td>{name}</td></tr>)}\n            </tbody>\n        </table>\n        <h4>Add to database</h4>\n        {h(\"form\", {onSubmit: onAdd},\n            h(\"label\", {key:\"name\"}, \"Name:\", h(\"input\", {type:\"text\", name:\"name\"})),\n            h(\"label\", {key:\"score\"}, \"Score:\", h(\"input\", {type:\"text\", name:\"score\"})),\n            h(\"input\", {key:\"submit\", type:\"submit\", value:\"Add\"})\n        )}\n    </div>);\n}\n\nexport default HighScoreView;","import React from 'react';\n//import { FirebaseContext } from '../firebase';\nimport HighScoreView from './highScoreView';\nimport * as app from 'firebase/app';\nimport 'firebase/firestore';\n\nconst config = {\n    apiKey: \"AIzaSyAbWEE-X5hskw_9wvYfoixZoKnPRl9xQBw\",\n    authDomain: \"smartypantz-c6131.firebaseapp.com\",\n    databaseURL: \"https://smartypantz-c6131.firebaseio.com\",\n    projectId: \"smartypantz-c6131\",\n    storageBucket: \"smartypantz-c6131.appspot.com\",\n    messagingSenderId: \"888130110269\",\n    appId: \"1:888130110269:web:dcae88f6c62d5e22867b54\",\n    measurementId: \"G-R2GE08FY8L\"\n};\n\napp.initializeApp(config);\nconst db = app.firestore();\n\nconst HighScoreContainer = () => {\n    const [rows, setRows] = React.useState([]);\n    React.useEffect(()=>{\n        getHighScores(setRows);\n    }, []);\n    return <HighScoreView onAdd={addToDB} highScores={rows}/>;\n};\n\nconst getHighScores = (setRows) => {\n    db.collection(\"highscore\").orderBy(\"score\", \"desc\").limit(10).get()\n        .then((querySnapshot) => {\n            const allRows = [];\n            querySnapshot.forEach((doc) => {\n                allRows.push({score: doc.data().score, name: doc.data().name});\n            });\n            setRows(allRows);\n        });\n}\n\nconst addToDB = (event) => {\n    event.preventDefault();\n    var name = event.target.elements[\"name\"].value;\n    var score = event.target.elements[\"score\"].value;\n    db.collection(\"highscore\").add({\n        name: name,\n        score: score\n    });\n}\n\nexport default HighScoreContainer;","import React from 'react';\n\nconst GameOver = () => {\n    return <gameOverView/>\n}\n\nexport default GameOver;","import React from 'react';\n// import logo from './logo.svg';\nimport { BrowserRouter as Router, Switch, Route} from 'react-router-dom';\n// import Navigation from './components/Navigation';\nimport './App.css';\nimport Start from './start/startContainer.js'\nimport Game from './game/gameContainer.js'\nimport HighScoreContainer from './highScore/highScoreContainer.js'\nimport GameOver from './gameOver/gameOverContainer.js'\n//import 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  \n  return (\n    <Router>\n      <Switch>\n          <Route exact path=\"/\">\n            <Start \n            />\n          </Route>\n          <Route path=\"/game\">\n            <Game\n            />\n          </Route>\n          <Route exact path=\"/highscore\">\n            <HighScoreContainer />\n          </Route>\n          <Route exact path=\"/gameover\">\n            <GameOver />\n          </Route>\n\n      </Switch>\n    </Router>\n  );\n}\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n//import {Provider} from 'react-redux';\n//import {createStore} from 'redux';\n//import reducer from 'GameModel';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n//import { FirebaseContext } from './firebase';\n\n//const store = createStore(reducer);\n//<Provider store = {store}></Provider>\n//</Provider>\n\n//<FirebaseContext.Provider value={db}>\n//</FirebaseContext.Provider>\n\nReactDOM.render(\n    <App />\n    ,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}